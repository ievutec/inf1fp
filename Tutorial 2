-- Informatics 1 - Functional Programming 
-- Tutorial 2
--
-- Week 4 - due: 9/10 Oct.

import Data.Char
import Data.List
import Test.QuickCheck


-- 1.
rotate :: Int -> [Char] -> [Char]
rotate n alpha |n<=0 || n > length alpha = "ERROR"
       	       |otherwise = drop n alpha ++ dropped 
	       		  where dropped = take n alpha

-- 2.
prop_rotate :: Int -> String -> Bool
prop_rotate k str = rotate (l - m) (rotate m str) == str
                        where l = length str
                              m = if l == 0 then 0 else k `mod` l

-- 3. 
makeKey :: Int -> [(Char, Char)]
makeKey n = zip alphabet shuffle
	  where alphabet = ['A'..'Z']
	  	shuffle = rotate n alphabet

-- 4.
lookUp :: Char -> [(Char, Char)] -> Char
lookUp letter cypher | (isUpper letter) && not(cypher==[]) = head [snd x | x<- cypher, fst x == letter]
       	      	     |otherwise = letter

lookUpRec :: Char -> [(Char, Char)] -> Char
lookUpRec n [] = n
lookUpRec n (x:xs) |not (isUpper n) = n
	    	   |fst x == n = snd x
		   |otherwise = lookUpRec n xs

prop_lookUp :: Char -> Bool
cypher = makeKey 5
prop_lookUp n = lookUp n cypher == lookUpRec n cypher

-- 5.
encipher :: Int -> Char -> Char
encipher n letter = lookUp letter (makeKey n)

-- 6.
normalize :: String -> String
normalize [] = []
normalize (x:xs) |isLetter x = (toUpper x) : normalize xs
	  	 |isDigit x = x:normalize xs
		 |otherwise = normalize xs

-- 7.
encipherStr :: Int -> String -> String
encipherStr n sentence = [encipher n x|x<-(normalize sentence)]

-- 8.
reverseKey :: [(Char, Char)] -> [(Char, Char)]
reverseKey xs = [(snd x,fst x)|x<-xs]

reverseKeyRec :: [(Char, Char)] -> [(Char, Char)]
reverseKeyRec [] = []
reverseKeyRec (x:xs) = (snd x,fst x):reverseKeyRec xs

prop_reverseKey :: [(Char, Char)] -> Bool
prop_reverseKey xs = reverseKey xs == reverseKeyRec xs


-- 9.
decipher :: Int -> Char -> Char
decipher n letter = lookUp letter (reverseKey (makeKey n))

decipherStr :: Int -> String -> String
decipherStr n words = [decipher n x|x<-(normalize words)]

-- 10.
contains :: String -> String -> Bool
contains [] bit = False
contains full bit |take (length bit) full == bit = True
	     	  |otherwise = contains (tail full) bit

-- 11.
candidates :: String -> [(Int, String)]
candidates word = [x|x<-xs, contains (snd x) "THE" || contains (snd x) "AND"]
	   	where xs = zip [1..26] [decipherStr x word|x<-[1..26]]



-- Optional Material

-- 12.
splitEachFive :: String -> [String]
splitEachFive = undefined

-- 13.
prop_transpose :: String -> Bool
prop_transpose = undefined

-- 14.
encrypt :: Int -> String -> String
encrypt = undefined

-- 15.
decrypt :: Int -> String -> String
decrypt = undefined

-- Challenge (Optional)

-- 16.
countFreqs :: String -> [(Char, Int)]
countFreqs = undefined

-- 17
freqDecipher :: String -> [String]
freqDecipher = undefined
