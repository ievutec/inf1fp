-- Informatics 1 Functional Programming
-- Tutorial 6
--
-- Due: 6/7 November

import System.Random

-- Importing the keymap module

import KeymapList


-- Type declarations

type Barcode = String
type Product = String
type Unit    = String

type Item    = (Product,Unit)

type Catalogue = Keymap Barcode Item


-- A little test catalog

testDB :: Catalogue
testDB = fromList [
 ("0265090316581", ("The Macannihav'nmor Highland Single Malt", "75ml bottle")),
 ("0903900739533", ("Bagpipes of Glory", "6-CD Box")),
 ("9780201342758", ("Thompson - \"Haskell: The Craft of Functional Programming\"", "Book")),
 ("0042400212509", ("Universal deep-frying pan", "pc"))
 ]


-- Exercise 1

longestProductLen :: [(Barcode, Item)] -> Int
longestProductLen xs = maximum[length(fst(snd x))|x<-xs]

formatLine :: Int -> (Barcode, Item) -> String
formatLine n xs = concat[fst xs,"...",take n (fst (snd xs) ++ (repeat '.')), "...", snd (snd xs)]

showCatalogue :: Catalogue -> String
showCatalogue cat = unlines[formatLine (longestProductLen catList) x|x<-catList]
  where catList = toList cat
     
-- Exercise 2
maybeToList :: Maybe a -> [a]
maybeToList Nothing = []
maybeToList (Just x) = [x]

listToMaybe :: [a] -> Maybe a
listToMaybe [] = Nothing
listToMaybe (x:_) = Just x

catMaybes :: [Maybe a] -> [a]
catMaybes xs = concat(map maybeToList xs)

-- Exercise 3

getItems :: [Barcode] -> Catalogue -> [Item]
getItems nums cat = catMaybes[get x cat|x<-nums]






-- Input-output ------------------------------------------

readDB :: IO Catalogue
readDB = do dbl <- readFile "database.csv"
            let db = fromList (map readLine $ lines dbl)
            putStrLn (size db >= 0 `seq` "Done")
            return db

readLine :: String -> (Barcode,Item)
readLine str = (a,(c,b))
    where
      (a,str2) = splitUpon ',' str
      (b,c)    = splitUpon ',' str2

splitUpon :: Char -> String -> (String,String)
splitUpon _ "" = ("","")
splitUpon c (x:xs) | x == c    = ("",xs)
                   | otherwise = (x:ys,zs)
                   where
                     (ys,zs) = splitUpon c xs

getSample :: Catalogue -> IO Barcode
getSample db = do g <- newStdGen
                  return $ fst $ toList db !! fst (randomR (0,size db - 1) g)
                  
-- *Main> :load tutorial6.hs
--[1 of 2] Compiling KeymapList       ( KeymapList.hs, interpreted )
--[2 of 2] Compiling Main             ( tutorial6.hs, interpreted )
--Ok, modules loaded: KeymapList, Main.
--(0.03 secs, 24321280 bytes)
-- *Main> theDB <-readDB
--Done
--(0.80 secs, 1697622456 bytes)
-- *Main> getSample theDB 
--"0085844589584"
--(0.02 secs, 2802256 bytes)
-- *Main> get it theDB 
--Just ("DIG ITL SAUS/T.TORT 58958","9    OZ")
--(0.17 secs, 70184048 bytes)
-- *Main> getSample theDB 
--"0028945535920"
--(0.01 secs, 512712 bytes)
-- *Main> get it theDB 
--Just ("LESSING KOLJA - PIANO MUSIC","CD")
--(0.08 secs, 27284344 bytes)
-- *Main> getSample theDB 
--"0033383675947"
--(0.02 secs, 1060112 bytes)
-- *Main> get it theDB 
--Just ("White Mushrooms","10 oz")
--(0.18 secs, 73586584 bytes)
-- *Main> getSample theDB 
--"0079400867209"
--(0.01 secs, 1061408 bytes)
-- *Main> get it theDB 
--Just ("Dove 2-in1 Shampoo/Cond. Extra Volume","12 oz. bottle")
--(0.01 secs, 2130216 bytes)
